generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  profile Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   
}

model Profile{
  id Int @id @default(autoincrement())

  profession String
  presentation String
  about String
  bio String
  userName String
  userId Int @unique

  contact Contact?
  image ImageProfile?

  socialMedia SocialMedia[] 
  hobby Hobby[] 
  skill Skill[] 
  jobExperience JobExperience[] 
  education Education[] 

  projects Project[] 
  articles Article[]
  message Message[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model ImageProfile{
  id Int @id @default(autoincrement())
  path String

  profileId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

}

model Contact{
  id Int @id @default(autoincrement())
  email String
  cel String
  profileId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}



model SocialMedia{
  id Int @id @default(autoincrement())
  name String
  link String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Hobby{
  id Int @id @default(autoincrement())
  name String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Skill{
  id Int @id @default(autoincrement())
  name String
  category String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model JobExperience{
  id Int @id @default(autoincrement())
  title String
  companyName String
  country String
  city String
  state String
  description String
  initialDate String
  endDate String
  profileId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Education{
  id Int @id @default(autoincrement())
  title String
  course String
  country String
  city String
  state String
  description String
  initialDate String
  endDate String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Project{
  id Int @id @default(autoincrement())
  title String
  description String
  webSite String
  gitHub String
  category String
  subCategory String
  image ImageProject?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ImageProject{
  id Int @id @default(autoincrement())
  path String

  projectId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

}

model Article{
  id Int @id @default(autoincrement())
  title String
  description String
  category String
  image ImageArticle?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ImageArticle{
  id Int @id @default(autoincrement())
  path String

  articleId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

}

model Message{
  id Int @id @default(autoincrement())
  name String
  email String
  title String?
  description String
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}