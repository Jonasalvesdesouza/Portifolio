generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  profile Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   
}

model Profile{
  id Int @id @default(autoincrement())

  presentation String
  about String
  bio String
  userId Int @unique

  contact Contact?
  address Address?
  image Image?

  socialMedia SocialMedia[]
  hobbies Hobbie[]
  skill Skill[]
  jobExperience JobExperience[]
  education Education[]
  projects Project[]
  articles Article[]
  message Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact{
  id Int @id @default(autoincrement())
  email String
  cel String
  profileId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Address{
  id Int @id @default(autoincrement())
  country String
  city String
  state String
  zipCode String?
  road String?
  neighborhood String?

  profileId Int? @unique 
  jobExperienceId Int? @unique
  educationId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  jobExperience JobExperience? @relation(fields: [jobExperienceId], references: [id], onDelete: Cascade)
  education Education? @relation(fields: [educationId], references: [id], onDelete: Cascade)
}

model Image{
  id Int @id @default(autoincrement())
  name String
  data Bytes

  profileId Int? @unique
  socialMidiaId Int? @unique
  hobbieId Int? @unique
  skillId Int? @unique
  projectId Int? @unique
  articleId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  socialMidia SocialMedia? @relation(fields: [socialMidiaId], references: [id], onDelete: Cascade)
  hobbie Hobbie? @relation(fields: [hobbieId], references: [id], onDelete: Cascade)
  skill Skill? @relation(fields: [skillId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

}


model SocialMedia{
  id Int @id @default(autoincrement())
  name String
  image Image?
  link String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Hobbie{
  id Int @id @default(autoincrement())
  name String
  image Image?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Skill{
  id Int @id @default(autoincrement())
  name String
  category String
  image Image?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model JobExperience{
  id Int @id @default(autoincrement())
  title String
  CompanyName String
  description String
  initialDate DateTime
  endDate DateTime
  address Address?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Education{
  id Int @id @default(autoincrement())
  title String
  couser String
  description String
  address Address?
  initialDate DateTime
  endDate DateTime
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Project{
  id Int @id @default(autoincrement())
  title String
  description String
  category String
  subCategory String
  image Image?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Article{
  id Int @id @default(autoincrement())
  title String
  description String
  category String
  image Image?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}      

model Message{
  id Int @id @default(autoincrement())
  name String
  email String
  title String
  description String
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}