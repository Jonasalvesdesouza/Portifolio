generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @id @default(autoincrement())
  name String
  email String @unique
  password String
  profile Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   
}

model Profile{
  id Int @id @default(autoincrement())

  presentation String
  about String
  bio String
  userId Int @unique

  contact Contact?
  address AddressProfile?
  image ImageProfile?

  socialMedia SocialMedia[] //ok -- ok -- getOne: -- ok --(Adicionar mensagem delete!)
  hobby Hobby[] //ok -- ok -- getOne: ok
  skill Skill[] //ok -- ok -- getOne: ok
  jobExperience JobExperience[] //ok -- ok -- addres: ok -- getOne: ok
  education Education[] //ok -- ok -- address: ok -- getOne: ok

  projects Project[] // 
  articles Article[] //
  message Message[] //

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AddressProfile{
  id Int @id @default(autoincrement())
  country String
  city String
  state String
  zipCode String
  road String
  neighborhood String
  number Int

  profileId Int? @unique 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ImageProfile{
  id Int @id @default(autoincrement())
  name String
  data Bytes

  profileId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

}

model Contact{
  id Int @id @default(autoincrement())
  email String
  cel String
  profileId Int @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}



model SocialMedia{
  id Int @id @default(autoincrement())
  name String
  link String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Hobby{
  id Int @id @default(autoincrement())
  name String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Skill{
  id Int @id @default(autoincrement())
  name String
  category String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model JobExperience{
  id Int @id @default(autoincrement())
  title String
  CompanyName String
  description String
  initialDate String
  endDate String
  address AddressJobExperience?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model AddressJobExperience{
  id Int @id @default(autoincrement())
  country String
  city String
  state String
  zipCode String?
  road String?
  neighborhood String?
  number Int?

  jobExperienceId Int @unique 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobExperience JobExperience? @relation(fields: [jobExperienceId], references: [id], onDelete: Cascade)
}

model Education{
  id Int @id @default(autoincrement())
  title String
  couser String
  description String
  address AddressEducation?
  initialDate String
  endDate String
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model AddressEducation{
  id Int @id @default(autoincrement())
  country String
  city String
  state String
  zipCode String?
  road String?
  neighborhood String?
  number Int?

  educationId Int? @unique 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  education Education? @relation(fields: [educationId], references: [id], onDelete: Cascade)
}

model Project{
  id Int @id @default(autoincrement())
  title String
  description String
  category String
  subCategory String
  image ImageProject?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ImageProject{
  id Int @id @default(autoincrement())
  name String
  data Bytes

  projectId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

}

model Article{
  id Int @id @default(autoincrement())
  title String
  description String
  category String
  image ImageArticle?
  profileId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ImageArticle{
  id Int @id @default(autoincrement())
  name String
  data Bytes

  articleId Int? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  article Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

}

model Message{
  id Int @id @default(autoincrement())
  name String
  email String
  title String
  description String
  profileId Int

  createdAt DateTime @default(now())

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
}